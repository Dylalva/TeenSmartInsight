name: Deploy Infrastructure and Application

on:
  workflow_dispatch:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: "us-east-2"
    outputs:
      deployment_success: ${{ steps.set_deployment_status.outputs.success }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Configure SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa_flaskapp
          chmod 600 ~/.ssh/id_rsa_flaskapp
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/id_rsa_flaskapp.pub
          chmod 644 ~/.ssh/id_rsa.pub
          chmod 644 ~/.ssh/id_rsa_flaskapp.pub
          ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts

      - name: Terraform Init
        run: |
          cd infrastructure
          terraform init
        
      - name: Terraform Plan
        run: |
          cd infrastructure
          terraform plan

      - name: Terraform Apply
        id: terraform
        run: |
          cd infrastructure
          terraform apply -auto-approve
          
      - name: Get Terraform Output
        id: terraform_output
        run: |
          cd infrastructure
          # Debug: Show all outputs
          echo "All Terraform outputs:"
          terraform output
          
          # Save output to file first
          terraform output -json > tf_output.json
          
          # Extract IP using jq if available
          if command -v jq &> /dev/null; then
            IP=$(jq -r '.public_ip.value' tf_output.json)
          else
            # Fallback to grep
            IP=$(grep -o '"public_ip": "[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+"' tf_output.json | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+')
          fi
          
          echo "Extracted IP: $IP"
          
          # Set outputs regardless of format
          echo "instance_ip=$IP" >> $GITHUB_OUTPUT
          echo "instance_ip=$IP" >> $GITHUB_ENV

      - name: Update hosts.ini with new IP
        run: |
          cd infrastructure
          # Get IP from file as fallback
          if [ -z "${{ steps.terraform_output.outputs.instance_ip }}" ] && [ -z "${{ env.instance_ip }}" ]; then
            if [ -f tf_output.json ]; then
              echo "Using IP from tf_output.json file"
              if command -v jq &> /dev/null; then
                IP=$(jq -r '.public_ip.value' tf_output.json)
              else
                IP=$(grep -o '"public_ip": "[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+"' tf_output.json | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+')
              fi
            else
              echo "Error: Could not determine instance IP"
              exit 1
            fi
          else
            IP="${{ steps.terraform_output.outputs.instance_ip || env.instance_ip }}"
          fi
          
          echo "Using IP: $IP"
          echo "[app_servers]" > hosts.ini
          echo "$IP ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa_flaskapp ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> hosts.ini

      - name: Wait for SSH to be available
        run: |
          cd infrastructure
          # Get IP from hosts.ini
          IP=$(grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+' hosts.ini)
          
          if [ -z "$IP" ]; then
            echo "Error: Could not extract IP from hosts.ini"
            cat hosts.ini
            exit 1
          fi
          
          echo "Waiting for SSH on $IP..."
          # Esperar a que la instancia esté lista para conexiones SSH
          for i in {1..30}; do
            if ssh -i ~/.ssh/id_rsa_flaskapp -o StrictHostKeyChecking=no -o ConnectTimeout=5 ubuntu@$IP 'echo SSH ready'; then
              echo "SSH está listo!"
              break
            fi
            echo "Intento $i: SSH aún no está listo, esperando..."
            sleep 10
          done

      - name: Run Ansible Playbook
        id: ansible
        continue-on-error: true
        run: |
          cd infrastructure
          # Mostrar información de depuración
          echo "Contenido de hosts.ini:"
          cat hosts.ini
          echo "\nVerificando permisos de la clave SSH:"
          ls -la ~/.ssh/id_rsa_flaskapp
          # Ejecutar Ansible con modo verbose
          ansible-playbook -i hosts.ini deploy-with-docker.yml -vv
          
      - name: Set deployment status
        id: set_deployment_status
        run: |
          if [ "${{ steps.ansible.outcome }}" == "success" ]; then
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Terraform Destroy on Failure
        if: steps.set_deployment_status.outputs.success != 'true'
        run: |
          echo "Deployment failed, destroying infrastructure..."
          cd infrastructure
          terraform destroy -auto-approve

  cleanup:
    needs: deploy
    if: failure() || needs.deploy.outputs.deployment_success != 'true'
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: "us-east-2"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0
          
      - name: Terraform Init
        run: |
          cd infrastructure
          terraform init
          
      - name: Terraform Destroy
        run: |
          cd infrastructure
          terraform destroy -auto-approve