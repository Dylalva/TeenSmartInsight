name: Deploy Infrastructure and Application

on:
  workflow_dispatch:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: "us-east-2"
    outputs:
      deployment_success: ${{ steps.set_deployment_status.outputs.success }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Generate SSH key
        run: |
          mkdir -p ~/.ssh
          # Generar una nueva clave SSH sin passphrase
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa_flaskapp -N ""
          chmod 600 ~/.ssh/id_rsa_flaskapp
          chmod 644 ~/.ssh/id_rsa_flaskapp.pub
          
          # Mostrar la clave pública generada
          echo "Nueva clave SSH pública generada:"
          cat ~/.ssh/id_rsa_flaskapp.pub
          
          # Configurar SSH
          cat > ~/.ssh/config << 'EOL'
          Host *
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            ServerAliveInterval 60
            ServerAliveCountMax 10
            ConnectTimeout 180
            ConnectionAttempts 10
          EOL
          chmod 600 ~/.ssh/config
          
          # Copiar la clave pública al directorio de infraestructura
          mkdir -p infrastructure
          cp ~/.ssh/id_rsa_flaskapp.pub infrastructure/

      - name: Terraform Init
        run: |
          cd infrastructure
          terraform init
        
      - name: Terraform Plan
        run: |
          cd infrastructure
          terraform plan

      - name: Terraform Apply
        id: terraform
        run: |
          cd infrastructure
          terraform apply -auto-approve
          
      - name: Get Terraform Output
        id: terraform_output
        run: |
          cd infrastructure
          # Write terraform output to a file
          terraform output > terraform_output.txt
          cat terraform_output.txt
          
          # Extract IP using grep
          IP=$(grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+' terraform_output.txt | head -1)
          echo "Extracted IP: $IP"
          
          # Save IP to a file for later steps
          echo "$IP" > instance_ip.txt
          
          # Set output manually
          echo "instance_ip=$IP" >> "$GITHUB_OUTPUT"

      - name: Update hosts.ini with new IP
        run: |
          cd infrastructure
          # Read IP from file
          if [ -f instance_ip.txt ]; then
            IP=$(cat instance_ip.txt)
            echo "Read IP from file: $IP"
          else
            echo "Error: instance_ip.txt not found"
            exit 1
          fi
          
          echo "Using IP: $IP"
          echo "[web]" > hosts.ini
          echo "$IP" >> hosts.ini
          echo "" >> hosts.ini
          echo "[web:vars]" >> hosts.ini
          echo "ansible_user=ubuntu" >> hosts.ini
          echo "ansible_ssh_private_key_file=~/.ssh/id_rsa_flaskapp" >> hosts.ini
          echo "ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> hosts.ini

      - name: Wait for SSH to be available
        run: |
          cd infrastructure
          # Read IP from file
          if [ -f instance_ip.txt ]; then
            IP=$(cat instance_ip.txt)
            echo "Read IP from file: $IP"
          else
            # Fallback to extracting from hosts.ini
            IP=$(grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+' hosts.ini | head -1)
            if [ -z "$IP" ]; then
              echo "Error: Could not extract IP from hosts.ini"
              cat hosts.ini
              exit 1
            fi
          fi
          
          echo "Waiting for SSH on $IP..."
          # Esperar a que la instancia esté lista para conexiones SSH
          for i in {1..30}; do
            if ssh -i ~/.ssh/id_rsa_flaskapp -o StrictHostKeyChecking=no -o ConnectTimeout=5 ubuntu@$IP 'echo SSH ready'; then
              echo "SSH está listo!"
              break
            fi
            echo "Intento $i: SSH aún no está listo, esperando..."
            sleep 10
          done

      - name: Run Ansible Playbook
        id: ansible
        continue-on-error: true
        run: |
          cd infrastructure
          # Mostrar información de depuración
          echo "Contenido de hosts.ini:"
          cat hosts.ini
          echo "\nVerificando permisos de la clave SSH:"
          ls -la ~/.ssh/id_rsa_flaskapp
          
          # Verificar que el archivo de playbook existe
          if [ -f "deploy-with-docker.yml" ]; then
            echo "Playbook found: deploy-with-docker.yml"
            ls -la deploy-with-docker.yml
          else
            echo "ERROR: deploy-with-docker.yml not found!"
            ls -la
            exit 1
          fi
          
          # Test SSH connection directly
          IP=$(grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+' hosts.ini | head -1)
          echo "\nTesting direct SSH connection to $IP:"
          ssh -i ~/.ssh/id_rsa_flaskapp -o StrictHostKeyChecking=no -o ConnectTimeout=10 -v ubuntu@$IP 'echo Direct SSH test' || echo "Direct SSH test failed but continuing"
          
          # Ejecutar Ansible con modo verbose y timeout aumentado
          ANSIBLE_TIMEOUT=60 ANSIBLE_SSH_RETRIES=10 ansible-playbook -i hosts.ini deploy-with-docker.yml -vvv
          
      - name: Set deployment status
        id: set_deployment_status
        run: |
          if [ "${{ steps.ansible.outcome }}" == "success" ]; then
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Terraform Destroy on Failure
        if: steps.set_deployment_status.outputs.success != 'true'
        run: |
          echo "Deployment failed, destroying infrastructure..."
          cd infrastructure
          terraform destroy -auto-approve

  cleanup:
    needs: deploy
    if: failure() || needs.deploy.outputs.deployment_success != 'true'
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: "us-east-2"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0
          
      - name: Terraform Init
        run: |
          cd infrastructure
          terraform init
          
      - name: Generate SSH key for cleanup
        run: |
          mkdir -p ~/.ssh
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa_flaskapp -N ""
          chmod 600 ~/.ssh/id_rsa_flaskapp
          chmod 644 ~/.ssh/id_rsa_flaskapp.pub
          
          # Copiar la clave pública al directorio de infraestructura
          mkdir -p infrastructure
          cp ~/.ssh/id_rsa_flaskapp.pub infrastructure/
      
      - name: Terraform Destroy
        run: |
          cd infrastructure
          terraform destroy -auto-approve